bash:
docker run --rm -p 8501:8501   --mount type=bind,source=./serving/tensorflow_serving/servables/tensorflow/testdata/saved_model_dislo_detect,target=/models/dislo_detect/1/   -e MODEL_NAME=dislo_detect -t tensorflow/serving &

python3

import json
data = json.dumps({"instances": './Ref04_Fig4a_Rot.jpg'})
import requests
headers = {"content-type": "application/json"}
json_response = requests.post('http://localhost:8501/v1/models/dislo_detect:predict', data=data, headers=headers)


docker build:
naming to docker.io/library/dislo-detect:predict-one

sudo su - to go to root
in root all files are hidden
ls -a / to see all files

can you explain this Each MODE is of the form '[ugoa]*([-+=]([rwxXst]*|[ugo]))+|[-+=][0-7]+'.
edit
u-user
g-group
o-others
a-all
- remove permission
+ add permission
= set permission
0 - no permission
1 or x execute 
2 or r read
3 execute and read
4 or w write
5 execute and read
6 exceute and write
7 execute read and write

sudo su - act as root
sudo chown user:group  change owner
change to root and use rm -rf /Docker to forcefully remove Docker folder
Show drafts

Docker 






























volume_up

This expression defines the format for specifying file permissions in Unix-based systems like Linux and macOS. Let's break it down part by part:

1. [ugoa]*:

This part represents the users or groups that can be affected by the permission changes. It can be a combination of the following characters:

 * `u`: User (owner) of the file
 * `g`: Group that owns the file
 * `o`: Others (users who are not the owner or in the group)
 * `a`: All of the above (user, group, and others)
The asterisk (*) indicates that you can specify zero or more of these characters. For example, ugo means you're changing permissions for the owner, group, and others.

*2. -+=: [rwxXst]|[ugo]:

This part defines the actual permission changes and who they apply to. Here's a breakdown:

 * `-`, `+`, `=`: These operators specify the action you want to take on permissions:
    * `-`: Remove permission
    * `+`: Add permission
    * `=`: Set permission (overrides any existing permissions)
 * `[rwxXst]*`: These characters represent the specific permissions you can modify:
    * `r`: Read permission
    * `w`: Write permission
    * `x`: Execute permission (for executable files)
    * `X`: Set execute permission for directories only (prevents accidental execution of files within the directory)
    * `s`: Set user ID (special permission)
    * `t`: Set sticky bit (special permission)
 * `[ugo]`: This can be used again within the brackets to specify which users or groups the permission change applies to (similar to part 1).
3. | [-+=][0-7]+:

This is an alternative way to specify permissions using octal numbers (base 8). Each digit represents a permission for the owner, group, and others:

 * `0`: No permission
 * `1`: Execute permission
 * `2`: Write permission
 * `3`: Write and execute permissions (combination of 2 and 1)
 * `4`: Read permission
 * `5`: Read and execute permissions (combination of 4 and 1)
 * `6`: Read and write permissions (combination of 4 and 2)
 * `7`: Read, write, and execute permissions (combination of 4, 2, and 1)
The operator (-, +, or =) works similarly to the previous part, indicating the action to take on the permission bits.

Examples:

chmod u+w filename: This grants write permission to the owner of the file filename.
chmod go-rwx filename: This removes read, write, and execute permissions for the group and others from the file filename.
chmod 755 filename: This sets the permissions for filename to read, write, and execute for the owner, read and execute for the group, and read-only for others (using octal representation).