{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { useUpdateDisloDensity } from \"./useUpdateDisloDensity\";\nimport { useRemoveOldBB } from \"./useRemoveOldBB\";\nimport axios from \"axios\";\nexport function usePredict(props) {\n  _s();\n  const [shouldPredict, setShouldPredict] = useState(false);\n  const {\n    imgContainerRef,\n    photo,\n    confidence,\n    overlap,\n    updateSumBhi\n  } = props;\n  const triggerRemoveOldBB = useRemoveOldBB();\n  const triggerUpdateDisloDensity = useUpdateDisloDensity();\n  const triggerPredict = () => {\n    setShouldPredict(true);\n  };\n  const predictBB = async () => {\n    triggerRemoveOldBB();\n    const formData = new FormData();\n    formData.append(\"file\", photo);\n    console.log(`confidence ${confidence}`);\n    formData.append(\"confidence\", confidence * 100);\n    formData.append(\"overlap\", overlap * 100);\n    try {\n      const response = await axios.post(\"http://localhost:5226/Predict\", formData);\n      let results = response.data;\n      console.log(\"Data received: \", results);\n      let formattedResults = formatResults(results);\n      console.log(`Formatted results: \\n`, formattedResults);\n      processBB(formattedResults, imgContainerRef);\n    } catch (error) {\n      console.log(\"Error why predicting: \", error);\n    }\n  };\n  function formatResults(results) {\n    let bboxes = [];\n    let imageWidth = results[\"image\"][\"width\"];\n    let imageHeight = results[\"image\"][\"height\"];\n    results[\"predictions\"].forEach(bb => {\n      console.log(bb);\n      bboxes.push([bb[\"x\"] / imageWidth * 100, bb[\"y\"] / imageHeight * 100, bb[\"width\"] / imageWidth * 100, bb[\"height\"] / imageHeight * 100, bb[\"confidence\"]]);\n    });\n    return [results[\"image\"][\"width\"], results[\"image\"][\"height\"], bboxes];\n  }\n  const bbColors = [\"red\"];\n  function processBB(formattedResults, imgContainerRef) {\n    // remove all the bounding boxes in the previous frames\n\n    let bboxes = formattedResults[2];\n    let SumBhi = 0;\n    console.log(`bboxes: `, bboxes);\n    let bbColor = \"DarkRed\"; // assign a dummy bounding box border colors\n    const imgContainer = imgContainerRef.current;\n    if (bboxes.length > 0) {\n      for (let i = 0; i < bboxes.length; i++) {\n        // drawing bounding boxes around the detected objects\n        const htmlBoundingBox = document.createElement(\"div\");\n        htmlBoundingBox.className = \"bounding-box\";\n        imgContainer.appendChild(htmlBoundingBox);\n        // console.log(\"bbColor Index\", bboxes[0][i]);\n        htmlBoundingBox.style.left = `${bboxes[i][0] - bboxes[i][2] / 2}%`;\n        htmlBoundingBox.style.top = `${bboxes[i][1] - bboxes[i][3] / 2}%`;\n        htmlBoundingBox.style.width = `${bboxes[i][2]}%`;\n        htmlBoundingBox.style.height = `${bboxes[i][3]}%`;\n        htmlBoundingBox.style.borderColor = bbColor;\n        SumBhi += bboxes[i][3] / 100;\n        // drawing bounding boxes around the detected objects\n      }\n    }\n    updateSumBhi(SumBhi);\n    console.log(`Sum of bhi: `, parseFloat(SumBhi).toFixed(2));\n  }\n  useEffect(() => {\n    if (shouldPredict) {\n      predictBB();\n      setShouldPredict(false);\n    }\n  }, [shouldPredict]);\n  return triggerPredict;\n}\n_s(usePredict, \"DQen/zrcwlLYNkjAodg1N3J0ZPk=\", false, function () {\n  return [useRemoveOldBB, useUpdateDisloDensity];\n});","map":{"version":3,"names":["useState","useEffect","useUpdateDisloDensity","useRemoveOldBB","axios","usePredict","props","_s","shouldPredict","setShouldPredict","imgContainerRef","photo","confidence","overlap","updateSumBhi","triggerRemoveOldBB","triggerUpdateDisloDensity","triggerPredict","predictBB","formData","FormData","append","console","log","response","post","results","data","formattedResults","formatResults","processBB","error","bboxes","imageWidth","imageHeight","forEach","bb","push","bbColors","SumBhi","bbColor","imgContainer","current","length","i","htmlBoundingBox","document","createElement","className","appendChild","style","left","top","width","height","borderColor","parseFloat","toFixed"],"sources":["/home/giang/Programming/AI/disloDetect/dislodetect_fe/src/hooks/usePredict.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { useUpdateDisloDensity } from \"./useUpdateDisloDensity\";\nimport { useRemoveOldBB } from \"./useRemoveOldBB\";\nimport axios from \"axios\";\n\nexport function usePredict(props) {\n  const [shouldPredict, setShouldPredict] = useState(false);\n  const { imgContainerRef, photo, confidence, overlap, updateSumBhi } = props;\n  const triggerRemoveOldBB = useRemoveOldBB();\n  const triggerUpdateDisloDensity = useUpdateDisloDensity();\n  const triggerPredict = () => {\n    setShouldPredict(true);\n  };\n  const predictBB = async () => {\n    triggerRemoveOldBB();\n    const formData = new FormData();\n    formData.append(\"file\", photo);\n    console.log(`confidence ${confidence}`)\n    formData.append(\"confidence\", confidence*100);\n    formData.append(\"overlap\", overlap*100);\n    try {\n      const response = await axios.post(\n        \"http://localhost:5226/Predict\",\n        formData\n      );\n      let results = response.data;\n      console.log(\"Data received: \", results);\n      let formattedResults = formatResults(results);\n      console.log(`Formatted results: \\n`, formattedResults);\n      processBB(formattedResults, imgContainerRef);\n    } catch (error) {\n      console.log(\"Error why predicting: \", error);\n    }\n  };\n\n  function formatResults(results) {\n    let bboxes = [];\n    let imageWidth = results[\"image\"][\"width\"];\n    let imageHeight = results[\"image\"][\"height\"];\n    results[\"predictions\"].forEach((bb) => {\n      console.log(bb);\n      bboxes.push([\n        (bb[\"x\"] / imageWidth) * 100,\n        (bb[\"y\"] / imageHeight) * 100,\n        (bb[\"width\"] / imageWidth) * 100,\n        (bb[\"height\"] / imageHeight) * 100,\n        bb[\"confidence\"],\n      ]);\n    });\n    return [results[\"image\"][\"width\"], results[\"image\"][\"height\"], bboxes];\n  }\n\n  const bbColors = [\"red\"];\n  function processBB(formattedResults, imgContainerRef) {\n    // remove all the bounding boxes in the previous frames\n\n    let bboxes = formattedResults[2];\n    let SumBhi = 0;\n    console.log(`bboxes: `, bboxes);\n\n    let bbColor = \"DarkRed\"; // assign a dummy bounding box border colors\n    const imgContainer = imgContainerRef.current;\n\n    if (bboxes.length > 0) {\n      for (let i = 0; i < bboxes.length; i++) {\n        // drawing bounding boxes around the detected objects\n        const htmlBoundingBox = document.createElement(\"div\");\n        htmlBoundingBox.className = \"bounding-box\";\n        imgContainer.appendChild(htmlBoundingBox);\n        // console.log(\"bbColor Index\", bboxes[0][i]);\n        htmlBoundingBox.style.left = `${bboxes[i][0] - bboxes[i][2] / 2}%`;\n        htmlBoundingBox.style.top = `${bboxes[i][1] - bboxes[i][3] / 2}%`;\n        htmlBoundingBox.style.width = `${bboxes[i][2]}%`;\n        htmlBoundingBox.style.height = `${bboxes[i][3]}%`;\n        htmlBoundingBox.style.borderColor = bbColor;\n        SumBhi += bboxes[i][3] / 100;\n        // drawing bounding boxes around the detected objects\n      }\n    }\n    updateSumBhi(SumBhi);\n    console.log(`Sum of bhi: `, parseFloat(SumBhi).toFixed(2));\n  }\n  useEffect(() => {\n    if (shouldPredict) {\n      predictBB();\n      setShouldPredict(false);\n    }\n  }, [shouldPredict]);\n  return triggerPredict;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}