{"ast":null,"code":"var _jsxFileName = \"/home/giang/Programming/AI/disloDetect/dislodetect_fe/src/components/PredictButton.js\";\nimport React, { useState } from \"react\";\nimport axios, { AxiosResponse } from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Predict(photo) {\n  const predictBB = async () => {\n    const formData = new FormData();\n    formData.append(\"file\", photo);\n    try {\n      const response = await axios.post(\"http://localhost:5226/Predict\", formData);\n      console.log(\"Data received: \", response.data);\n    } catch (error) {\n      console.log(\"Error why predicting: \", error);\n    }\n  };\n\n  //--------do NOT delete, predict (roboflow) implementation------------\n  //--------do NOT delete, predict (roboflow) implementation------------\n  //--------do NOT delete, predict (roboflow) implementation------------\n\n  // document\n  //   .getElementById(\"btnPredict\")\n  //   .addEventListener(\"click\", async function () {\n  //     try {\n  //       const response = await fetch(\"/predict\");\n  //       const bboxes = await response.json();\n  //       console.log(`prediction results: \\n`, bboxes);\n  //       returnInfo = processBB(bboxes);\n  //     } catch (error) {\n  //       console.error(error);\n  //     }\n  //   });\n\n  // document\n  //   .getElementById(\"btnPredict\")\n  //   .addEventListener(\"click\", async function () {\n  //     predict();\n  //   });\n\n  // async function predict() {\n  //   try {\n  //     removeOldBB();\n  //     const confidence = document.getElementById(\"iptConfidence\").value;\n  //     const overlap = document.getElementById(\"iptOverlap\").value;\n  //     const response = await fetch(\"/predict\", {\n  //       method: \"POST\",\n  //       body: JSON.stringify({ confidence, overlap }),\n  //       headers: { \"Content-Type\": \"application/json\" },\n  //     });\n  //     const results = await response.json();\n  //     console.log(`results: \\n`, results);\n  //     formattedResults = formatResults(results);\n  //     console.log(`Formatted results: \\n`, formattedResults);\n  //     processBB(formattedResults);\n  //     //   returnInfo = processBB(bboxes);\n  //   } catch (error) {\n  //     console.error(error);\n  //   }\n  // }\n\n  // function formatResults(results) {\n  //   let bboxes = [];\n  //   let imageWidth = results[\"image\"][\"width\"];\n  //   let imageHeight = results[\"image\"][\"height\"];\n  //   results[\"predictions\"].forEach((bb) => {\n  //     console.log(bb);\n  //     bboxes.push([\n  //       (bb[\"x\"] / imageWidth) * 100,\n  //       (bb[\"y\"] / imageHeight) * 100,\n  //       (bb[\"width\"] / imageWidth) * 100,\n  //       (bb[\"height\"] / imageHeight) * 100,\n  //       bb[\"confidence\"],\n  //     ]);\n  //   });\n  //   return [results[\"image\"][\"width\"], results[\"image\"][\"height\"], bboxes];\n  // }\n\n  // function removeOldBB() {\n  //   const oldBBoxes = document.getElementsByClassName(\"bounding-box\");\n  //   while (oldBBoxes.length > 0) {\n  //     oldBBoxes[0].parentNode.removeChild(oldBBoxes[0]);\n  //   }\n  // }\n  // const bbColors = [\"red\"];\n  // function processBB(formattedResults) {\n  //   // remove all the bounding boxes in the previous frames\n  //   bboxes = formattedResults[2];\n  //   let SumBhi = 0;\n  //   console.log(`bboxes: `, bboxes);\n  //   removeOldBB();\n  //   let bbColor = \"DarkRed\"; // assign a dummy bounding box border colors\n  //   if (bboxes.length > 0) {\n  //     for (let i = 0; i < bboxes.length; i++) {\n  //       // drawing bounding boxes around the detected objects\n  //       const htmlBoundingBox = document.createElement(\"div\");\n  //       htmlBoundingBox.className = \"bounding-box\";\n  //       document.getElementById(\"image-container\").appendChild(htmlBoundingBox);\n  //       // console.log(\"bbColor Index\", bboxes[0][i]);\n  //       htmlBoundingBox.style.left = `${bboxes[i][0] - bboxes[i][2] / 2}%`;\n  //       htmlBoundingBox.style.top = `${bboxes[i][1] - bboxes[i][3] / 2}%`;\n  //       htmlBoundingBox.style.width = `${bboxes[i][2]}%`;\n  //       htmlBoundingBox.style.height = `${bboxes[i][3]}%`;\n  //       htmlBoundingBox.style.borderColor = bbColor;\n  //       SumBhi += bboxes[i][3] / 100;\n  //       // drawing bounding boxes around the detected objects\n  //     }\n  //   }\n  //   document.getElementById(\"optSumBhi\").value = parseFloat(SumBhi).toFixed(2);\n  //   updateDisloDensity();\n  //   console.log(`Sum of bhi: `, parseFloat(SumBhi).toFixed(2));\n  //   return \"predicted\";\n  // }\n  //--------do NOT delete, predict (roboflow) implementation------------\n  //--------do NOT delete, predict (roboflow) implementation------------\n  //--------do NOT delete, predict (roboflow) implementation------------\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: predictBB,\n      children: \"Predict (roboflow)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n}\n_c = Predict;\nexport default Predict;\nvar _c;\n$RefreshReg$(_c, \"Predict\");","map":{"version":3,"names":["React","useState","axios","AxiosResponse","jsxDEV","_jsxDEV","Predict","photo","predictBB","formData","FormData","append","response","post","console","log","data","error","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/giang/Programming/AI/disloDetect/dislodetect_fe/src/components/PredictButton.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios, { AxiosResponse } from \"axios\";\nfunction Predict(photo) {\n    const predictBB = async () => {\n        const formData = new FormData;\n        formData.append(\"file\", photo);\n        try {\n            const response = await axios.post(\n                \"http://localhost:5226/Predict\",\n                formData\n            );\n\n            console.log (\"Data received: \", response.data);\n            \n\n        } catch (error) {\n            console.log(\"Error why predicting: \", error);\n\n        }\n\n    };\n\n    //--------do NOT delete, predict (roboflow) implementation------------\n//--------do NOT delete, predict (roboflow) implementation------------\n//--------do NOT delete, predict (roboflow) implementation------------\n\n// document\n//   .getElementById(\"btnPredict\")\n//   .addEventListener(\"click\", async function () {\n//     try {\n//       const response = await fetch(\"/predict\");\n//       const bboxes = await response.json();\n//       console.log(`prediction results: \\n`, bboxes);\n//       returnInfo = processBB(bboxes);\n//     } catch (error) {\n//       console.error(error);\n//     }\n//   });\n\n// document\n//   .getElementById(\"btnPredict\")\n//   .addEventListener(\"click\", async function () {\n//     predict();\n//   });\n\n// async function predict() {\n//   try {\n//     removeOldBB();\n//     const confidence = document.getElementById(\"iptConfidence\").value;\n//     const overlap = document.getElementById(\"iptOverlap\").value;\n//     const response = await fetch(\"/predict\", {\n//       method: \"POST\",\n//       body: JSON.stringify({ confidence, overlap }),\n//       headers: { \"Content-Type\": \"application/json\" },\n//     });\n//     const results = await response.json();\n//     console.log(`results: \\n`, results);\n//     formattedResults = formatResults(results);\n//     console.log(`Formatted results: \\n`, formattedResults);\n//     processBB(formattedResults);\n//     //   returnInfo = processBB(bboxes);\n//   } catch (error) {\n//     console.error(error);\n//   }\n// }\n\n// function formatResults(results) {\n//   let bboxes = [];\n//   let imageWidth = results[\"image\"][\"width\"];\n//   let imageHeight = results[\"image\"][\"height\"];\n//   results[\"predictions\"].forEach((bb) => {\n//     console.log(bb);\n//     bboxes.push([\n//       (bb[\"x\"] / imageWidth) * 100,\n//       (bb[\"y\"] / imageHeight) * 100,\n//       (bb[\"width\"] / imageWidth) * 100,\n//       (bb[\"height\"] / imageHeight) * 100,\n//       bb[\"confidence\"],\n//     ]);\n//   });\n//   return [results[\"image\"][\"width\"], results[\"image\"][\"height\"], bboxes];\n// }\n\n// function removeOldBB() {\n//   const oldBBoxes = document.getElementsByClassName(\"bounding-box\");\n//   while (oldBBoxes.length > 0) {\n//     oldBBoxes[0].parentNode.removeChild(oldBBoxes[0]);\n//   }\n// }\n// const bbColors = [\"red\"];\n// function processBB(formattedResults) {\n//   // remove all the bounding boxes in the previous frames\n//   bboxes = formattedResults[2];\n//   let SumBhi = 0;\n//   console.log(`bboxes: `, bboxes);\n//   removeOldBB();\n//   let bbColor = \"DarkRed\"; // assign a dummy bounding box border colors\n//   if (bboxes.length > 0) {\n//     for (let i = 0; i < bboxes.length; i++) {\n//       // drawing bounding boxes around the detected objects\n//       const htmlBoundingBox = document.createElement(\"div\");\n//       htmlBoundingBox.className = \"bounding-box\";\n//       document.getElementById(\"image-container\").appendChild(htmlBoundingBox);\n//       // console.log(\"bbColor Index\", bboxes[0][i]);\n//       htmlBoundingBox.style.left = `${bboxes[i][0] - bboxes[i][2] / 2}%`;\n//       htmlBoundingBox.style.top = `${bboxes[i][1] - bboxes[i][3] / 2}%`;\n//       htmlBoundingBox.style.width = `${bboxes[i][2]}%`;\n//       htmlBoundingBox.style.height = `${bboxes[i][3]}%`;\n//       htmlBoundingBox.style.borderColor = bbColor;\n//       SumBhi += bboxes[i][3] / 100;\n//       // drawing bounding boxes around the detected objects\n//     }\n//   }\n//   document.getElementById(\"optSumBhi\").value = parseFloat(SumBhi).toFixed(2);\n//   updateDisloDensity();\n//   console.log(`Sum of bhi: `, parseFloat(SumBhi).toFixed(2));\n//   return \"predicted\";\n// }\n//--------do NOT delete, predict (roboflow) implementation------------\n//--------do NOT delete, predict (roboflow) implementation------------\n//--------do NOT delete, predict (roboflow) implementation------------\n    return (\n        <div>\n            <button onClick={predictBB}>Predict (roboflow)</button>    \n        </div>\n    );\n}\n\nexport default Predict;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,IAAIC,aAAa,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC7C,SAASC,OAAOA,CAACC,KAAK,EAAE;EACpB,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC1B,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAD,CAAC;IAC7BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEJ,KAAK,CAAC;IAC9B,IAAI;MACA,MAAMK,QAAQ,GAAG,MAAMV,KAAK,CAACW,IAAI,CAC7B,+BAA+B,EAC/BJ,QACJ,CAAC;MAEDK,OAAO,CAACC,GAAG,CAAE,iBAAiB,EAAEH,QAAQ,CAACI,IAAI,CAAC;IAGlD,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZH,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEE,KAAK,CAAC;IAEhD;EAEJ,CAAC;;EAED;EACJ;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACI,oBACIZ,OAAA;IAAAa,QAAA,eACIb,OAAA;MAAQc,OAAO,EAAEX,SAAU;MAAAU,QAAA,EAAC;IAAkB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtD,CAAC;AAEd;AAACC,EAAA,GA5HQlB,OAAO;AA8HhB,eAAeA,OAAO;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}