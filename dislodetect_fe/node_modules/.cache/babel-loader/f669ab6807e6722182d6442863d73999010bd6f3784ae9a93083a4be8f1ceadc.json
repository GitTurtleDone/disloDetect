{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport Infos from \"../components/Infos.json\";\nexport function useResetInputs() {\n  _s();\n  //   const dftConf = 0.254; // default Confidence\n  //   const dftIoU = 0.7; // default overlap IoU\n  //   const dftSumBhi = 3.46; // default sum of BhI\n  //   const dftDisloDensity = 3.3e10; // default dislocation density\n  //   const dftAf = 8.6e4; // default film area\n  //   const dft_t = 100; // default TEM specimen thickness\n  //   const dftHimage = 825; // default height of the entire image\n  const dftCustomInputValues = [\"3.46\", \"3.3e10\", \"8.6e4\", \"100\", 85];\n  const dftInputSliderValues = [0.254, 0.7];\n  const customOutputInfos = Infos[0];\n  const inputSliderInfos = Infos[1];\n  const [shouldResetInputs, setShouldResetInputs] = useState(false);\n  const triggerResetInputs = () => {\n    setShouldResetInputs(true);\n  };\n  useEffect(() => {\n    if (shouldResetInputs) {\n      console.log(\"customOutputInfos\", customOutputInfos);\n      console.log(\"inputSliderInfos\", inputSliderInfos);\n      Object.keys(customOutputInfos).map((key, index) => {\n        const value = customOutputInfos[key];\n        document.getElementById(value[\"inputID\"]).value = dftCustomInputValues[index].toPrecision(2);\n      });\n      Object.keys(Infos[1]).map((key, index) => {\n        const value = inputSliderInfos[key];\n        const ipt = document.getElementById(value[\"iptId\"]);\n        ipt.value = dftInputSliderValues[index];\n        const sld = document.getElementById(value[\"sldId\"]);\n        sld.value = dftInputSliderValues[index];\n      });\n      setShouldResetInputs(false);\n    }\n  }, [shouldResetInputs]);\n  return triggerResetInputs;\n}\n_s(useResetInputs, \"YrpQ7ShR5rJzZPKZr0iGQC33+TU=\");","map":{"version":3,"names":["useState","useEffect","Infos","useResetInputs","_s","dftCustomInputValues","dftInputSliderValues","customOutputInfos","inputSliderInfos","shouldResetInputs","setShouldResetInputs","triggerResetInputs","console","log","Object","keys","map","key","index","value","document","getElementById","toPrecision","ipt","sld"],"sources":["/home/giang/Programming/AI/disloDetect/dislodetect_fe/src/hooks/useResetInputs.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport Infos from \"../components/Infos.json\";\n\nexport function useResetInputs() {\n  //   const dftConf = 0.254; // default Confidence\n  //   const dftIoU = 0.7; // default overlap IoU\n  //   const dftSumBhi = 3.46; // default sum of BhI\n  //   const dftDisloDensity = 3.3e10; // default dislocation density\n  //   const dftAf = 8.6e4; // default film area\n  //   const dft_t = 100; // default TEM specimen thickness\n  //   const dftHimage = 825; // default height of the entire image\n  const dftCustomInputValues = [\"3.46\", \"3.3e10\", \"8.6e4\", \"100\", 85];\n  const dftInputSliderValues = [0.254, 0.7];\n  const customOutputInfos = Infos[0];\n  const inputSliderInfos = Infos[1];\n  const [shouldResetInputs, setShouldResetInputs] = useState(false);\n  const triggerResetInputs = () => {\n    setShouldResetInputs(true);\n  };\n  useEffect(() => {\n    if (shouldResetInputs) {\n      console.log(\"customOutputInfos\", customOutputInfos);\n      console.log(\"inputSliderInfos\", inputSliderInfos);\n      Object.keys(customOutputInfos).map((key, index) => {\n        const value = customOutputInfos[key];\n        document.getElementById(value[\"inputID\"]).value =\n          dftCustomInputValues[index].toPrecision(2);\n      });\n      Object.keys(Infos[1]).map((key, index) => {\n        const value = inputSliderInfos[key];\n        const ipt = document.getElementById(value[\"iptId\"]);\n        ipt.value = dftInputSliderValues[index];\n        const sld = document.getElementById(value[\"sldId\"]);\n        sld.value = dftInputSliderValues[index];\n      });\n      setShouldResetInputs(false);\n    }\n  }, [shouldResetInputs]);\n\n  return triggerResetInputs;\n}\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,KAAK,MAAM,0BAA0B;AAE5C,OAAO,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EAC/B;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMC,oBAAoB,GAAG,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC;EACnE,MAAMC,oBAAoB,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC;EACzC,MAAMC,iBAAiB,GAAGL,KAAK,CAAC,CAAC,CAAC;EAClC,MAAMM,gBAAgB,GAAGN,KAAK,CAAC,CAAC,CAAC;EACjC,MAAM,CAACO,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACjE,MAAMW,kBAAkB,GAAGA,CAAA,KAAM;IAC/BD,oBAAoB,CAAC,IAAI,CAAC;EAC5B,CAAC;EACDT,SAAS,CAAC,MAAM;IACd,IAAIQ,iBAAiB,EAAE;MACrBG,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEN,iBAAiB,CAAC;MACnDK,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEL,gBAAgB,CAAC;MACjDM,MAAM,CAACC,IAAI,CAACR,iBAAiB,CAAC,CAACS,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAK;QACjD,MAAMC,KAAK,GAAGZ,iBAAiB,CAACU,GAAG,CAAC;QACpCG,QAAQ,CAACC,cAAc,CAACF,KAAK,CAAC,SAAS,CAAC,CAAC,CAACA,KAAK,GAC7Cd,oBAAoB,CAACa,KAAK,CAAC,CAACI,WAAW,CAAC,CAAC,CAAC;MAC9C,CAAC,CAAC;MACFR,MAAM,CAACC,IAAI,CAACb,KAAK,CAAC,CAAC,CAAC,CAAC,CAACc,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAK;QACxC,MAAMC,KAAK,GAAGX,gBAAgB,CAACS,GAAG,CAAC;QACnC,MAAMM,GAAG,GAAGH,QAAQ,CAACC,cAAc,CAACF,KAAK,CAAC,OAAO,CAAC,CAAC;QACnDI,GAAG,CAACJ,KAAK,GAAGb,oBAAoB,CAACY,KAAK,CAAC;QACvC,MAAMM,GAAG,GAAGJ,QAAQ,CAACC,cAAc,CAACF,KAAK,CAAC,OAAO,CAAC,CAAC;QACnDK,GAAG,CAACL,KAAK,GAAGb,oBAAoB,CAACY,KAAK,CAAC;MACzC,CAAC,CAAC;MACFR,oBAAoB,CAAC,KAAK,CAAC;IAC7B;EACF,CAAC,EAAE,CAACD,iBAAiB,CAAC,CAAC;EAEvB,OAAOE,kBAAkB;AAC3B;AAACP,EAAA,CArCeD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}