{"ast":null,"code":"var _jsxFileName = \"/home/giang/Programming/AI/disloDetect/dislodetect_fe/src/components/PredictButton.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport \"../App.css\";\nimport { useRemoveOldBB } from \"../hooks/useRemoveOldBB.js\";\nimport { usePredict } from \"../hooks/usePredict.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Predict(props) {\n  // const { imgContainerRef, photo, updateSumBhi } = props;\n  // const triggerRemoveOldBB = useRemoveOldBB();\n  // const predictBB = async () => {\n  //   triggerRemoveOldBB();\n  //   const formData = new FormData();\n  //   formData.append(\"file\", photo);\n  //   try {\n  //     const response = await axios.post(\n  //       \"http://localhost:5226/Predict\",\n  //       formData\n  //     );\n  //     let results = response.data;\n  //     console.log(\"Data received: \", results);\n  //     let formattedResults = formatResults(results);\n  //     console.log(`Formatted results: \\n`, formattedResults);\n  //     processBB(formattedResults, imgContainerRef);\n  //   } catch (error) {\n  //     console.log(\"Error why predicting: \", error);\n  //   }\n  // };\n\n  // function formatResults(results) {\n  //   let bboxes = [];\n  //   let imageWidth = results[\"image\"][\"width\"];\n  //   let imageHeight = results[\"image\"][\"height\"];\n  //   results[\"predictions\"].forEach((bb) => {\n  //     console.log(bb);\n  //     bboxes.push([\n  //       (bb[\"x\"] / imageWidth) * 100,\n  //       (bb[\"y\"] / imageHeight) * 100,\n  //       (bb[\"width\"] / imageWidth) * 100,\n  //       (bb[\"height\"] / imageHeight) * 100,\n  //       bb[\"confidence\"],\n  //     ]);\n  //   });\n  //   return [results[\"image\"][\"width\"], results[\"image\"][\"height\"], bboxes];\n  // }\n\n  // const bbColors = [\"red\"];\n  // function processBB(formattedResults, imgContainerRef) {\n  //   // remove all the bounding boxes in the previous frames\n\n  //   let bboxes = formattedResults[2];\n  //   let SumBhi = 0;\n  //   console.log(`bboxes: `, bboxes);\n\n  //   let bbColor = \"DarkRed\"; // assign a dummy bounding box border colors\n  //   const imgContainer = imgContainerRef.current;\n\n  //   if (bboxes.length > 0) {\n  //     for (let i = 0; i < bboxes.length; i++) {\n  //       // drawing bounding boxes around the detected objects\n  //       const htmlBoundingBox = document.createElement(\"div\");\n  //       htmlBoundingBox.className = \"bounding-box\";\n  //       imgContainer.appendChild(htmlBoundingBox);\n  //       // console.log(\"bbColor Index\", bboxes[0][i]);\n  //       htmlBoundingBox.style.left = `${bboxes[i][0] - bboxes[i][2] / 2}%`;\n  //       htmlBoundingBox.style.top = `${bboxes[i][1] - bboxes[i][3] / 2}%`;\n  //       htmlBoundingBox.style.width = `${bboxes[i][2]}%`;\n  //       htmlBoundingBox.style.height = `${bboxes[i][3]}%`;\n  //       htmlBoundingBox.style.borderColor = bbColor;\n  //       SumBhi += bboxes[i][3] / 100;\n  //       // drawing bounding boxes around the detected objects\n  //     }\n  //   }\n  //   updateSumBhi(SumBhi);\n  //   console.log(`Sum of bhi: `, parseFloat(SumBhi).toFixed(2));\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginBottom: \"30px\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: predictBB,\n      children: \"Predict (roboflow)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_c = Predict;\nexport default Predict;\nvar _c;\n$RefreshReg$(_c, \"Predict\");","map":{"version":3,"names":["React","axios","useRemoveOldBB","usePredict","jsxDEV","_jsxDEV","Predict","props","style","marginBottom","children","onClick","predictBB","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/giang/Programming/AI/disloDetect/dislodetect_fe/src/components/PredictButton.js"],"sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport \"../App.css\";\r\nimport { useRemoveOldBB } from \"../hooks/useRemoveOldBB.js\";\r\nimport { usePredict } from \"../hooks/usePredict.js\";\r\n\r\nfunction Predict(props) {\r\n  // const { imgContainerRef, photo, updateSumBhi } = props;\r\n  // const triggerRemoveOldBB = useRemoveOldBB();\r\n  // const predictBB = async () => {\r\n  //   triggerRemoveOldBB();\r\n  //   const formData = new FormData();\r\n  //   formData.append(\"file\", photo);\r\n  //   try {\r\n  //     const response = await axios.post(\r\n  //       \"http://localhost:5226/Predict\",\r\n  //       formData\r\n  //     );\r\n  //     let results = response.data;\r\n  //     console.log(\"Data received: \", results);\r\n  //     let formattedResults = formatResults(results);\r\n  //     console.log(`Formatted results: \\n`, formattedResults);\r\n  //     processBB(formattedResults, imgContainerRef);\r\n  //   } catch (error) {\r\n  //     console.log(\"Error why predicting: \", error);\r\n  //   }\r\n  // };\r\n\r\n  // function formatResults(results) {\r\n  //   let bboxes = [];\r\n  //   let imageWidth = results[\"image\"][\"width\"];\r\n  //   let imageHeight = results[\"image\"][\"height\"];\r\n  //   results[\"predictions\"].forEach((bb) => {\r\n  //     console.log(bb);\r\n  //     bboxes.push([\r\n  //       (bb[\"x\"] / imageWidth) * 100,\r\n  //       (bb[\"y\"] / imageHeight) * 100,\r\n  //       (bb[\"width\"] / imageWidth) * 100,\r\n  //       (bb[\"height\"] / imageHeight) * 100,\r\n  //       bb[\"confidence\"],\r\n  //     ]);\r\n  //   });\r\n  //   return [results[\"image\"][\"width\"], results[\"image\"][\"height\"], bboxes];\r\n  // }\r\n\r\n  // const bbColors = [\"red\"];\r\n  // function processBB(formattedResults, imgContainerRef) {\r\n  //   // remove all the bounding boxes in the previous frames\r\n\r\n  //   let bboxes = formattedResults[2];\r\n  //   let SumBhi = 0;\r\n  //   console.log(`bboxes: `, bboxes);\r\n\r\n  //   let bbColor = \"DarkRed\"; // assign a dummy bounding box border colors\r\n  //   const imgContainer = imgContainerRef.current;\r\n\r\n  //   if (bboxes.length > 0) {\r\n  //     for (let i = 0; i < bboxes.length; i++) {\r\n  //       // drawing bounding boxes around the detected objects\r\n  //       const htmlBoundingBox = document.createElement(\"div\");\r\n  //       htmlBoundingBox.className = \"bounding-box\";\r\n  //       imgContainer.appendChild(htmlBoundingBox);\r\n  //       // console.log(\"bbColor Index\", bboxes[0][i]);\r\n  //       htmlBoundingBox.style.left = `${bboxes[i][0] - bboxes[i][2] / 2}%`;\r\n  //       htmlBoundingBox.style.top = `${bboxes[i][1] - bboxes[i][3] / 2}%`;\r\n  //       htmlBoundingBox.style.width = `${bboxes[i][2]}%`;\r\n  //       htmlBoundingBox.style.height = `${bboxes[i][3]}%`;\r\n  //       htmlBoundingBox.style.borderColor = bbColor;\r\n  //       SumBhi += bboxes[i][3] / 100;\r\n  //       // drawing bounding boxes around the detected objects\r\n  //     }\r\n  //   }\r\n  //   updateSumBhi(SumBhi);\r\n  //   console.log(`Sum of bhi: `, parseFloat(SumBhi).toFixed(2));\r\n  // }\r\n\r\n  return (\r\n    <div style={{marginBottom: \"30px\"}}>\r\n      <button onClick={predictBB}>Predict (roboflow)</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Predict;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,YAAY;AACnB,SAASC,cAAc,QAAQ,4BAA4B;AAC3D,SAASC,UAAU,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpD,SAASC,OAAOA,CAACC,KAAK,EAAE;EACtB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACEF,OAAA;IAAKG,KAAK,EAAE;MAACC,YAAY,EAAE;IAAM,CAAE;IAAAC,QAAA,eACjCL,OAAA;MAAQM,OAAO,EAAEC,SAAU;MAAAF,QAAA,EAAC;IAAkB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpD,CAAC;AAEV;AAACC,EAAA,GA3EQX,OAAO;AA6EhB,eAAeA,OAAO;AAAC,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}